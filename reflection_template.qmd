---
title: "STAT 331 Portfolio"
author: "Jonathan Flores Martinez"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

#Lab 3 Question 2
evaluations <- read_csv(file = here::here("Week3", "Lab3", "teacher_evals.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2

#Lab 2 Question 1
#Revised, previously did not have here::here components
surveys <- read_csv(file = here::here("Week 2", "Lab 2", "surveys.csv"))


```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

# nothing right now

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

#Lab 3 Question 5
#Select cols
teacher_evals_clean <- evaluations |> 
  select(course_id, teacher_id, question_no, no_participants, resp_share,
         SET_score_avg, percent_failed_cur, academic_degree,
         seniority, gender) |> 
  rename(sex = gender) |> 
  filter(no_participants > 9) |> 
  mutate(teacher_id = as.character(teacher_id),
         across(
           .cols = c(question_no, no_participants, seniority),
           .fns = ~ as.integer(.x)
         ))


```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

# Challenge 4, Open Ended Analysis, Table creation
# Deleted the only column I did not need
# revised changed from ! to - sign

#| fig-cap: "Mean price of childcare base on type in 2018"

home_care <- c("family_based_infant",
               "family_based_toddler",
               "family_based_preschool")

center_care <- c("center_based_infant",
                 "center_based_toddler",
                 "center_based_preschool")

ca_cc_table |>
  filter( study_year == 2018) |> 
  group_by(`California Region`) |> 
    summarise(center_based_infant = median(mc_infant),
            family_based_infant = median(mfcc_infant),
            center_based_toddler = median(mc_toddler),
            family_based_toddler = median(mfcc_toddler),
            center_based_preschool = median(mc_preschool),
            family_based_preschool = median(mfcc_preschool),
            .groups = "drop"  ) |> 
  pivot_longer(cols = c(center_based_infant,
                        center_based_toddler,
                        center_based_preschool,
                        family_based_infant,
                        family_based_toddler,
                        family_based_preschool), 
               names_to = "costs") |>
  mutate(childcare_type = fct_collapse(.f = costs,
                          center = center_care,
                          family = home_care)) |> 
  
  select(-costs) |> 
  group_by(`California Region`, childcare_type) |> 
  summarise(`Mean Cost of Childcare` = mean(value), .groups = "drop") |> 
  pivot_wider(names_from = childcare_type, 
              values_from = `Mean Cost of Childcare`) |> 
  arrange(desc(center)) |> 
    rename(`Mean Cost of Center Based Childcare` = center,
           `Mean Cost of Family Based Childcare` = family)

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

# Lab 3 Question 5
# Filtering rows, in this case with an inequality
teacher_evals_clean <- evaluations |> 
  select(course_id, teacher_id, question_no, no_participants, resp_share,
         SET_score_avg, percent_failed_cur, academic_degree,
         seniority, gender) |> 
  rename(sex = gender) |> 
  filter(no_participants > 9) |> 
  mutate(teacher_id = as.character(teacher_id),
         across(
           .cols = c(question_no, no_participants, seniority),
           .fns = ~ as.integer(.x)
         ))

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-2

```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

# Lab 5, Murder mystery
# In this case I used a regular experssion "^" to make sure that the pattern that was foound started with the provide clue

get_fit_now_member |> 
  left_join(get_fit_now_check_in, by = join_by(id == membership_id)) |> 
  left_join(interview, by = join_by(person_id)) |> 
  mutate(check_in_date = ymd(check_in_date)) |> 
  filter(check_in_date == "2018-01-09",
         str_detect(id, pattern = "^48Z"),
         membership_status == "gold") |> 
  mutate(check_in_date = ymd(check_in_date)) |> 
  select(id, name, membership_status, check_in_date, transcript)

```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

#Lab 5, Murder mystery
# made sure that the pattern started with Annabel to account for Annabels with differetn last name
person |> 
  filter(str_detect(name, pattern = "^Annabel") &
           address_street_name == "Franklin Ave"|
           address_street_name == "Northwestern Dr" &
           address_number == max(address_number)) |> 
  left_join(interview, by = join_by(id == person_id)) |> 
  select(name, address_number, address_street_name, transcript)


```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
# Lab 5 Murder Mystery
# revised to create a date column, it makes it easier to filter for dates

#| label: following other lead
get_fit_now_member |> 
  left_join(get_fit_now_check_in, by = join_by(id == membership_id)) |> 
  left_join(interview, by = join_by(person_id)) |> 
  mutate(check_in_date = ymd(check_in_date)) |> 
  filter(check_in_date == "2018-01-09",
         str_detect(id, pattern = "^48Z"),
         membership_status == "gold") |> 
  mutate(check_in_date = ymd(check_in_date)) |> 
  select(id, name, membership_status, check_in_date, transcript)

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1

#Lab 3 Question 5
# mutating teacher id from the numeric format into the character format because it fits the context better

teacher_evals_clean <- evaluations |> 
  select(course_id, teacher_id, question_no, no_participants, resp_share,
         SET_score_avg, percent_failed_cur, academic_degree,
         seniority, gender) |> 
  rename(sex = gender) |> 
  filter(no_participants > 9) |> 
  mutate(teacher_id = as.character(teacher_id),
         across(
           .cols = c(question_no, no_participants, seniority),
           .fns = ~ as.integer(.x)


```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

# Lab 4 Question 7
# originally the facets were in alphbetical order. I wanted a specific order so I created factors to reorder the levels of the facets.
ca_childcare |> 
  select(region, county_name, study_year,
         Infant = mc_infant,
         Toddler = mc_toddler,
         Preschool = mc_preschool) |> 
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "age_group",
               values_to = "median_cc_price") |>
  mutate(region = fct_reorder2(
         .f = region, .x = study_year, .y = median_cc_price),
         age_group = fct(age_group,
                         levels = c("Infant", "Toddler", "Preschool"))) |> 

  ggplot(mapping = aes(
    x = study_year, y = median_cc_price,
    color = region )) +
  geom_point(size = .8) +
  geom_smooth(method = loess, alpha = 0.2, linewidth = .6) +
  facet_wrap(~ age_group) +
  
  scale_x_continuous(breaks = seq(2008, 2018, 2)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region",
       x = "Study Year", y = "") +
  theme_bw() +
  theme(panel.spacing = unit(.5, "cm"), aspect.ratio = 1,
        axis.text.x = element_text(size = 7)
         )


```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

#Lab 4 Question 3
ca_childcare <- ca_childcare |> 
  left_join(y = tax_rev,
            by = join_by(county_name == entity_name, study_year == year))


```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

#Lab 5, Murder mystery
person |> 
  filter(str_detect(name, pattern = "^Annabel") &
           address_street_name == "Franklin Ave"|
           address_street_name == "Northwestern Dr" &
           address_number == max(address_number)) |> 
  left_join(interview, by = join_by(id == person_id)) |> 
  select(name, address_number, address_street_name, transcript)


```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

# Lab 5 Murder Mystery
#Revised to include an inner join.
# The inner join was used to make sure that all the rows in selected existed in both datasets, this way the resultig dataset had no nulls

#| label: following other lead
get_fit_now_member |> 
  inner_join(get_fit_now_check_in, by = join_by(id == membership_id)) |> 
  left_join(interview, by = join_by(person_id)) |> 
  filter(check_in_date == 20180109,
         str_detect(id, pattern = "^48Z"),
         membership_status == "gold") |> 
  mutate(check_in_date = ymd(check_in_date)) |> 
  select(id, name, membership_status, check_in_date, transcript)

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

#lab 5 Murder Mystery
#revised to include an inner join
# In this case the inner joins helps because the resulting data frame only has people who exist in the previously joined data frames and in the facebook event check in.

person |> 
  left_join(interview, by = join_by(id == person_id)) |> 
  left_join(drivers_license, by = join_by(license_id == id)) |> 
  inner_join(facebook_event_checkin, by = join_by(id == person_id)) |> 
  filter(car_make == "Tesla", car_model == "Model S",
         gender == "female", event_name == "SQL Symphony Concert") |> 
  mutate(date = ymd(date)) |> 
  select(name, gender, height, age, hair_color, car_make,
         car_model, event_name, date, transcript)

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
# Lab 4 Question 7


ca_childcare |> 
  select(region, county_name, study_year,
         Infant = mc_infant,
         Toddler = mc_toddler,
         Preschool = mc_preschool) |> 
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "age_group",
               values_to = "median_cc_price") |>
  mutate(region = fct_reorder2(
         .f = region, .x = study_year, .y = median_cc_price),
         age_group = fct(age_group,
                         levels = c("Infant", "Toddler", "Preschool"))) |> 


```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

# Lab 4 Question 7
ca_childcare |> 
  select(region, county_name, study_year,
         Infant = mc_infant,
         Toddler = mc_toddler,
         Preschool = mc_preschool) |> 
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "age_group",
               values_to = "median_cc_price") |>
  mutate(region = fct_reorder2(
         .f = region, .x = study_year, .y = median_cc_price),
         age_group = fct(age_group,
                         levels = c("Infant", "Toddler", "Preschool"))) |> 

  ggplot(mapping = aes(
    x = study_year, y = median_cc_price,
    color = region )) +
  geom_point(size = .8) +
  geom_smooth(method = loess, alpha = 0.2, linewidth = .6) +
  facet_wrap(~ age_group) +
  
  scale_x_continuous(breaks = seq(2008, 2018, 2)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region",
       x = "Study Year", y = "") +
  theme_bw() +
  theme(panel.spacing = unit(.5, "cm"), aspect.ratio = 1,
        axis.text.x = element_text(size = 7)
         )

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

#Challenge 3 Question 3
#Chi squared test
chisq.test(x = teacher_evals_compare$SET_level,
           y = teacher_evals_compare$sen_level)

```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
